on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up repository
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          check-latest: true
          distribution: adopt
          java-version: ${{ matrix.java }}
      - name: Set up cache
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-artifacts
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Check Java codestyle
        run: mvn com.coveo:fmt-maven-plugin:check
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: 12
      - name: Check Javascript codestyle
        run: npm install && npm run format-check
        working-directory: dc-cudami-editor
      - name: Build with Maven
        run: mvn -B -U verify -Pproduction
    strategy:
      matrix:
        java: [11, 14]
  publish:
    if: github.event_name == 'push' && contains(github.ref, 'main')
    needs: build
    outputs:
      PROJECT_VERSION: ${{ steps.projectversion.outputs.PROJECT_VERSION }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          check-latest: true
          distribution: adopt
          java-version: 11
          server-id: ossrh-snapshots
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Set up cache
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-artifacts
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Install XML utils
        run: sudo apt install libxml2-utils
      - name: Extract project version
        run: echo "PROJECT_VERSION=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' pom.xml)" >> $GITHUB_ENV
      - name: Set project version as output variable
        id: projectversion
        run: echo "::set-output name=PROJECT_VERSION::${{ env.PROJECT_VERSION }}"
      - name: Publish snapshot to the Maven Central Repository
        run: if [[ "${{ env.PROJECT_VERSION }}" =~ .*SNAPSHOT ]]; then mvn -B deploy -DskipTests -Pproduction; fi
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  deploy:
    if: github.event_name == 'push' && contains(github.ref, 'main')
    runs-on: ubuntu-latest
    needs: [build, publish]
    steps:
      - name: Deploy cudami
        run: if [[ "${{ needs.publish.outputs.PROJECT_VERSION }}" =~ .*SNAPSHOT ]]; then curl -X POST -F token=${{ secrets.TRIGGER_TOKEN }} -F ref=main -F "variables[DEPLOY_VERSION_TO_ENVIRONMENT]=$(printf '%s > development' $PROJECT_VERSION)" ${{ secrets.TRIGGER_URL }}; fi
